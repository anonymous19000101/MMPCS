from torch.utils.data import Dataset, DataLoader
from torch_geometric.data import Data
import torch
import pandas as pd
from rdkit import Chem
import numpy as np
import pickle
from tqdm import  tqdm



allowable_features = {
    'possible_atomic_num_list':       list(range(1, 119)),
    'possible_formal_charge_list':    [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
    'possible_chirality_list':        [
        Chem.rdchem.ChiralType.CHI_UNSPECIFIED,
        Chem.rdchem.ChiralType.CHI_TETRAHEDRAL_CW,
        Chem.rdchem.ChiralType.CHI_TETRAHEDRAL_CCW,
        Chem.rdchem.ChiralType.CHI_OTHER
    ],
    'possible_hybridization_list':    [
        Chem.rdchem.HybridizationType.S,
        Chem.rdchem.HybridizationType.SP,
        Chem.rdchem.HybridizationType.SP2,
        Chem.rdchem.HybridizationType.SP3,
        Chem.rdchem.HybridizationType.SP3D,
        Chem.rdchem.HybridizationType.SP3D2,
        Chem.rdchem.HybridizationType.UNSPECIFIED
    ],
    'possible_numH_list':             [0, 1, 2, 3, 4, 5, 6, 7, 8],
    'possible_implicit_valence_list': [0, 1, 2, 3, 4, 5, 6],
    'possible_degree_list':           [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'possible_bonds':                 [
        Chem.rdchem.BondType.SINGLE,
        Chem.rdchem.BondType.DOUBLE,
        Chem.rdchem.BondType.TRIPLE,
        Chem.rdchem.BondType.AROMATIC
    ],
    'possible_bond_dirs':             [  # only for double bond stereo information
        Chem.rdchem.BondDir.NONE,
        Chem.rdchem.BondDir.ENDUPRIGHT,
        Chem.rdchem.BondDir.ENDDOWNRIGHT
    ]
}

def mol_to_graph_data_obj_simple(mol):
    """ used in MoleculeDataset() class
    Converts rdkit mol objects to graph data object in pytorch geometric
    NB: Uses simplified atom and bond features, and represent as indices
    :param mol: rdkit mol object
    :return: graph data object with the attributes: x, edge_index, edge_attr """

    # atoms
    # num_atom_features = 2  # atom type, chirality tag
    
    atom_features_list = []
    for atom in mol.GetAtoms():
        atom_feature = [allowable_features['possible_atomic_num_list'].index(atom.GetAtomicNum())] + \
                       [allowable_features['possible_chirality_list'].index(atom.GetChiralTag())]
        atom_features_list.append(atom_feature)
    x = torch.tensor(np.array(atom_features_list), dtype=torch.long)

    # bonds
    if len(mol.GetBonds()) <= 0:  # mol has no bonds
        num_bond_features = 2  # bond type & direction
        edge_index = torch.empty((2, 0), dtype=torch.long)
        edge_attr = torch.empty((0, num_bond_features), dtype=torch.long)
    else:  # mol has bonds
        edges_list = []
        edge_features_list = []
        for bond in mol.GetBonds():
            i = bond.GetBeginAtomIdx()
            j = bond.GetEndAtomIdx()
            edge_feature = [allowable_features['possible_bonds'].index(bond.GetBondType())] + \
                           [allowable_features['possible_bond_dirs'].index(bond.GetBondDir())]
            edges_list.append((i, j))
            edge_features_list.append(edge_feature)
            edges_list.append((j, i))
            edge_features_list.append(edge_feature)

        # data.edge_index: Graph connectivity in COO format with shape [2, num_edges]
        edge_index = torch.tensor(np.array(edges_list).T, dtype=torch.long)

        # data.edge_attr: Edge feature matrix with shape [num_edges, num_edge_features]
        edge_attr = torch.tensor(np.array(edge_features_list), dtype=torch.long)
    data = Data(x=x, edge_index=edge_index, edge_attr=edge_attr)
    return data

# 创建数据集
# 包含smiles和图数据
class MyDataset(Dataset):
    def __init__(self,filename="zinc10M.csv"):
        smiles_list = pd.read_csv(filename, index_col=None)["smiles"].tolist()
        # smiles_list = smiles_list[:1000000]
        self.smiles_list = []
        # 数据过滤
        for smiles in tqdm(smiles_list, desc="数据过滤"):
            try:
                mol = Chem.MolFromSmiles(smiles)
                if mol is not None:
                    mol = Chem.MolFromSmiles(smiles)
                    data = mol_to_graph_data_obj_simple(mol)
                    self.smiles_list.append(smiles)
                else:
                    print(smiles)
            except Exception as e:
                print("Error", e, smiles)
        print("数据过滤后的数据量：", len(self.smiles_list))


    def __len__(self):
        return len(self.smiles_list)

    def __getitem__(self, idx):
        smiles = self.smiles_list[idx]
        graph = mol_to_graph_data_obj_simple(Chem.MolFromSmiles(smiles))
        return smiles, graph
    

class FineTuneClassifierDataset(Dataset):
    def __init__(self,filename="zinc10M.csv", smiles_col="smiles", label_col="label", type="train"):
        smiles_list = pd.read_csv(filename, index_col=None)[smiles_col].tolist()
        label_list = pd.read_csv(filename, index_col=None)[label_col].tolist()
        combined_list = list(zip(smiles_list, label_list))
        np.random.shuffle(combined_list)
        smiles_list, label_list = zip(*combined_list)


        if type == "train":
            smiles_list = smiles_list[:int(len(smiles_list)*0.8)]
            label_list = label_list[:int(len(label_list)*0.8)]
        elif type == "test":
            smiles_list = smiles_list[int(len(smiles_list)*0.8):]
            label_list = label_list[int(len(label_list)*0.8):]
        
        

        # smiles_list = smiles_list[:10000]
        self.label_list = []
        self.smiles_list = []
        # 数据过滤
        for index,smiles in tqdm(enumerate(smiles_list), desc="数据过滤"):
            try:
                mol = Chem.MolFromSmiles(smiles)
                if mol is not None:
                    mol = Chem.MolFromSmiles(smiles)
                    data = mol_to_graph_data_obj_simple(mol)
                    self.smiles_list.append(smiles)
                    self.label_list.append(label_list[index])
                else:
                    print(smiles)
            except Exception as e:
                print("Error", e, smiles)
        print("数据过滤后的数据量：", len(self.smiles_list))


    def __len__(self):
        return len(self.smiles_list)

    def __getitem__(self, idx):
        smiles = self.smiles_list[idx]
        graph = mol_to_graph_data_obj_simple(Chem.MolFromSmiles(smiles))
        label = self.label_list[idx]
        return smiles, graph, label
    
    